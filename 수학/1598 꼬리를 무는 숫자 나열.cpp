/*
	1 + (n-1)4 = 4n-3 (1행)
	2 + (n-1)4 = 4n-2 (2행)
	3 + (n-1)4 = 4n-1 (3행)
	4 + (n-1)4 = 4n   (4행)

	1행부터 4행까지 일반화한 수열에 만족하는지 찾는다.
	만족하는 경우, 해당 행의 정보와 n에 들어가는 열의 정보를 저장

	ex)
	(3, 3)

	(1, 9)

	abs(1-3) + abs(9-3) = 2 + 6

*/

#include<stdio.h>
#include<math.h>

int N, M;

int main()
{
	int x1, x2;
	int y1, y2;
	int dist = 0;

	scanf("%d %d", &N, &M);

	//1 행4n-3 = N => (N+3)/4
	if (((N + 3) % 4) == 0)
	{
		x1 = 1;
		y1 = ((N + 3) / 4);
	}
	else if (((N + 2) % 4) == 0) //2행 4n-2 => (N+2)/4
	{
		x1 = 2;
		y1 = ((N + 2) / 4);
	}
	else if (((N + 1) % 4) == 0) //3행 4n-1 => (N+1)/4
	{
		x1 = 3;
		y1 = ((N + 1) / 4);
	}
	else if ((N % 4) == 0) //4행 4n => N/4
	{
		x1 = 4;
		y1 = (N / 4);
	}


	//1 행4n-3 = N => (N+3)/4
	if (((M + 3) % 4) == 0)
	{
		x2 = 1;
		y2 = ((M + 3) / 4);
	}
	else if (((M + 2) % 4) == 0) //2행 4n-2 => (N+2)/4
	{
		x2 = 2;
		y2 = ((M + 2) / 4);
	}
	else if (((M + 1) % 4) == 0) //3행 4n-1 => (N+1)/4
	{
		x2 = 3;
		y2 = ((M + 1) / 4);
	}
	else if ((M % 4) == 0) //4행 4n => N/4
	{
		x2 = 4;
		y2 = (M / 4);
	}

//	printf("x1 = %d  y1 = %d\n", x1, y1);
//	printf("x2 = %d  y2 = %d\n", x2, y2);


	//거리 계산
	dist = abs(x2 - x1) + abs(y2 - y1);

	printf("%d\n", dist);

	return 0;
}
